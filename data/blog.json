[
    {
        "id": "01",
        "question": "What is CORS?",
        "answer": "<p>Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a 'preflight' request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.</p><p>For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.</p><p>The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers. Modern browsers use CORS in APIs such as XMLHttpRequest or Fetch to mitigate the risks of cross-origin HTTP requests.</p>"
    },
    {
        "id": "02",
        "question": "Why are you using 'Firebase'? What other options do you have to implement authentication?",
        "answer": "<p>Firebase is an app development platform that helps you develop iOS, Android and Web apps. We are using Firebase for it's authentication service.</p><p>Some other well-known authentication service providers are out there. Such as:</p><ul><li>Supabase</li><li>Okta</li><li>Auth0</li><li>Amazon Cognito</li><li>OneLogin</li><li>Keycloak</li></ul>"
    },
    {
        "id": "03",
        "question": "How does the private route work?",
        "answer": "<p>Private Routes (also called Protected Routes) require a user being authorized to visit a route/page. So if a user is not authorized for a specific page, they cannot access it. In simple words, These routes can be accessed only after login. The most common example is authentication in a React application where a user can only access the protected pages when they are logged in.</p>"
    },
    {
        "id": "04",
        "question": "What is Node? How does Node work?",
        "answer": "<p>Node.js is an open-source backend javascript runtime environment. It is a backend service where javascript works on the server-side of the application. This way javascript is used on both frontend and backend. Node.js runs on chrome v8 engine which converts javascript code into machine code, it is highly scalable, lightweight, fast, and data-intensive.</p><h5 class='text-xl font-bold'>Working of Node.js:</h5><p>Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request.</p>"
    }
]
